import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, Canvas, Frame
import requests
from PIL import Image, ImageTk
import json
import os
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# App constants
APP_TITLE = "Rajasthan Crop Advisor"
APP_WIDTH = 1200
APP_HEIGHT = 800
THEME_COLOR_PRIMARY = "#1b5e20"  # Dark green
THEME_COLOR_SECONDARY = "#43a047"  # Medium green
THEME_COLOR_ACCENT = "#ffb300"  # Amber
THEME_COLOR_LIGHT = "#e8f5e9"  # Light green background
THEME_COLOR_BG = "#f5f5f5"  # Light grey background
THEME_COLOR_TEXT = "#212121"  # Dark text
THEME_COLOR_TEXT_LIGHT = "#ffffff"  # White text

class CropRecommendationApp:
    def __init__(self, root):
        self.root = root
        self.root.title(APP_TITLE)
        self.root.geometry(f"{APP_WIDTH}x{APP_HEIGHT}")
        self.root.config(bg=THEME_COLOR_BG)
        
        # Set application icon if available
        try:
            self.root.iconbitmap("app_icon.ico")  # Replace with your icon
        except:
            pass
        
        # Create the main frames
        self.setup_frames()
        
        # Create top header
        self.setup_header()
        
        # Create input form
        self.setup_input_form()
        
        # Create results area (initially hidden)
        self.setup_results_area()
        
        # Create footer
        self.setup_footer()
        
        # Initialize data
        self.weather_data = None
        self.recommendation_data = None
        
        # Load district data for soil types
        self.district_data = self.load_district_data()

    def setup_frames(self):
        # Header frame
        self.header_frame = tk.Frame(self.root, bg=THEME_COLOR_PRIMARY, height=70)
        self.header_frame.pack(fill=tk.X)
        
        # Main content frame with padding
        self.main_frame = tk.Frame(self.root, bg=THEME_COLOR_BG, padx=20, pady=20)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Input frame (left side)
        self.input_frame = tk.Frame(self.main_frame, bg=THEME_COLOR_LIGHT, padx=15, pady=15)
        self.input_frame.pack(side=tk.LEFT, fill=tk.Y, expand=False, padx=(0, 10))
        
        # Results frame (right side, initially hidden)
        self.results_frame = tk.Frame(self.main_frame, bg=THEME_COLOR_BG)
        
        # Footer frame
        self.footer_frame = tk.Frame(self.root, bg=THEME_COLOR_PRIMARY, height=30)
        self.footer_frame.pack(fill=tk.X, side=tk.BOTTOM)

    def setup_header(self):
        # App title
        self.title_label = tk.Label(
            self.header_frame, 
            text=APP_TITLE, 
            font=("Arial", 22, "bold"), 
            bg=THEME_COLOR_PRIMARY, 
            fg=THEME_COLOR_TEXT_LIGHT
        )
        self.title_label.pack(side=tk.LEFT, padx=20, pady=10)
        
        # Subtitle
        self.subtitle_label = tk.Label(
            self.header_frame, 
            text="Smart agricultural recommendations for Rajasthan farmers", 
            font=("Arial", 12), 
            bg=THEME_COLOR_PRIMARY, 
            fg=THEME_COLOR_TEXT_LIGHT
        )
        self.subtitle_label.pack(side=tk.LEFT, padx=10, pady=10)

    def setup_input_form(self):
        # Form title
        input_title = tk.Label(
            self.input_frame, 
            text="Enter Your Information", 
            font=("Arial", 14, "bold"), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_PRIMARY
        )
        input_title.grid(row=0, column=0, columnspan=2, sticky="w", pady=(0, 15))
        
        # District selection
        district_label = tk.Label(
            self.input_frame, 
            text="Select District:", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        district_label.grid(row=1, column=0, sticky="w", pady=5)
        
        # Create sorted list of Rajasthan districts
        self.districts = [
            "Ajmer", "Alwar", "Banswara", "Baran", "Barmer", 
            "Bharatpur", "Bhilwara", "Bikaner", "Bundi", "Chittorgarh", 
            "Churu", "Dausa", "Dholpur", "Dungarpur", "Hanumangarh", 
            "Jaipur", "Jaisalmer", "Jalore", "Jhalawar", "Jhunjhunu", 
            "Jodhpur", "Karauli", "Kota", "Nagaur", "Pali", 
            "Pratapgarh", "Rajsamand", "Sawai Madhopur", "Sikar", "Sirohi", 
            "Sri Ganganagar", "Tonk", "Udaipur", "Bhiwadi", "Balotra", 
            "Beawar", "Kekri", "Deeg", "Dudu", "Gangapur City", 
            "Khetri", "Kotputli", "Neem Ka Thana", "Phalodi", "Shahpura", 
            "Sujangarh", "Tijara", "Fatehpur", "Salumbar"
        ]
        self.districts.sort()
        
        self.district_var = tk.StringVar()
        district_dropdown = ttk.Combobox(
            self.input_frame, 
            textvariable=self.district_var, 
            values=self.districts, 
            font=("Arial", 12), 
            width=25,
            state="readonly"
        )
        district_dropdown.grid(row=1, column=1, sticky="w", pady=5, padx=(10, 0))
        district_dropdown.current(self.districts.index("Jaipur"))  # Default to Jaipur
        
        # API Key - optionally allow customization
        api_label = tk.Label(
            self.input_frame, 
            text="API Key (Optional):", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        api_label.grid(row=2, column=0, sticky="w", pady=5)
        
        self.api_var = tk.StringVar(value="dcf8225c8ced49aea3520049250303")
        api_entry = ttk.Entry(
            self.input_frame, 
            textvariable=self.api_var, 
            font=("Arial", 12), 
            width=27
        )
        api_entry.grid(row=2, column=1, sticky="w", pady=5, padx=(10, 0))
        
        # Soil override - allow manual selection
        soil_label = tk.Label(
            self.input_frame, 
            text="Override Soil Type:", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        soil_label.grid(row=3, column=0, sticky="w", pady=5)
        
        soil_types = [
            "Default (District-based)", 
            "Sandy", 
            "Sandy Loam", 
            "Clay Loam", 
            "Black Clay", 
            "Alluvial", 
            "Mixed Red & Black", 
            "Mixed Black"
        ]
        
        self.soil_var = tk.StringVar(value=soil_types[0])
        soil_dropdown = ttk.Combobox(
            self.input_frame, 
            textvariable=self.soil_var, 
            values=soil_types, 
            font=("Arial", 12), 
            width=25,
            state="readonly"
        )
        soil_dropdown.grid(row=3, column=1, sticky="w", pady=5, padx=(10, 0))
        
        # Advanced options section (collapsible)
        self.advanced_frame_visible = False
        self.advanced_frame = tk.Frame(self.input_frame, bg=THEME_COLOR_LIGHT)
        
        # Advanced options toggle button
        self.advanced_button = ttk.Button(
            self.input_frame,
            text="Show Advanced Options â–¼",
            command=self.toggle_advanced_options
        )
        self.advanced_button.grid(row=4, column=0, columnspan=2, sticky="w", pady=(15, 0))
        
        # Advanced options content
        self.setup_advanced_options()
        
        # Divider
        ttk.Separator(self.input_frame, orient='horizontal').grid(
            row=6, column=0, columnspan=2, sticky="ew", pady=15
        )
        
        # Get recommendation button
        self.submit_button = tk.Button(
            self.input_frame, 
            text="Get Crop Recommendation", 
            font=("Arial", 12, "bold"), 
            bg=THEME_COLOR_SECONDARY, 
            fg=THEME_COLOR_TEXT_LIGHT,
            padx=15, 
            pady=8,
            command=self.get_recommendation
        )
        self.submit_button.grid(row=7, column=0, columnspan=2, pady=(0, 10))
        
        # Loading indicator (initially hidden)
        self.loading_label = tk.Label(
            self.input_frame, 
            text="Fetching data, please wait...", 
            font=("Arial", 10, "italic"), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        self.loading_label.grid(row=8, column=0, columnspan=2)
        self.loading_label.grid_remove()
        
        # Configure grid for input frame
        self.input_frame.grid_columnconfigure(1, weight=1)

    def setup_advanced_options(self):
        # Season override
        season_label = tk.Label(
            self.advanced_frame, 
            text="Override Season:", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        season_label.grid(row=0, column=0, sticky="w", pady=5)
        
        seasons = ["Auto (Date-based)", "Summer", "Monsoon", "Winter"]
        self.season_var = tk.StringVar(value=seasons[0])
        season_dropdown = ttk.Combobox(
            self.advanced_frame, 
            textvariable=self.season_var, 
            values=seasons, 
            font=("Arial", 12), 
            width=25,
            state="readonly"
        )
        season_dropdown.grid(row=0, column=1, sticky="w", pady=5, padx=(10, 0))
        
        # Crop filter
        crop_filter_label = tk.Label(
            self.advanced_frame, 
            text="Crop Type Filter:", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        crop_filter_label.grid(row=1, column=0, sticky="w", pady=5)
        
        crop_filters = ["All Crops", "Cereals Only", "Pulses Only", "Cash Crops Only", "Oil Seeds Only", "Spices Only"]
        self.crop_filter_var = tk.StringVar(value=crop_filters[0])
        crop_filter_dropdown = ttk.Combobox(
            self.advanced_frame, 
            textvariable=self.crop_filter_var, 
            values=crop_filters, 
            font=("Arial", 12), 
            width=25,
            state="readonly"
        )
        crop_filter_dropdown.grid(row=1, column=1, sticky="w", pady=5, padx=(10, 0))
        
        # Water availability override
        water_label = tk.Label(
            self.advanced_frame, 
            text="Water Availability:", 
            font=("Arial", 12), 
            bg=THEME_COLOR_LIGHT, 
            fg=THEME_COLOR_TEXT
        )
        water_label.grid(row=2, column=0, sticky="w", pady=5)
        
        water_options = ["Default (District-based)", "Very Low", "Low", "Medium", "High"]
        self.water_var = tk.StringVar(value=water_options[0])
        water_dropdown = ttk.Combobox(
            self.advanced_frame, 
            textvariable=self.water_var, 
            values=water_options, 
            font=("Arial", 12), 
            width=25,
            state="readonly"
        )
        water_dropdown.grid(row=2, column=1, sticky="w", pady=5, padx=(10, 0))

    def toggle_advanced_options(self):
        if self.advanced_frame_visible:
            self.advanced_frame.grid_remove()
            self.advanced_button.config(text="Show Advanced Options â–¼")
            self.advanced_frame_visible = False
        else:
            self.advanced_frame.grid(row=5, column=0, columnspan=2, sticky="ew", pady=(10, 0))
            self.advanced_button.config(text="Hide Advanced Options â–²")
            self.advanced_frame_visible = True

    def setup_results_area(self):
        # Results will be dynamically populated when data is available
        pass

    def create_results_widgets(self):
        # Clear previous results
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        
        # Configure grid
        self.results_frame.columnconfigure(0, weight=1)
        
        # Main recommendation card
        recommendation_card = tk.Frame(
            self.results_frame, 
            bg=THEME_COLOR_TEXT_LIGHT,
            highlightbackground=THEME_COLOR_SECONDARY,
            highlightthickness=2,
            padx=20,
            pady=20
        )
        recommendation_card.grid(row=0, column=0, sticky="ew", pady=(0, 15))
        
        # Top recommendation header
        top_rec_label = tk.Label(
            recommendation_card,
            text="RECOMMENDED CROP",
            font=("Arial", 14),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_SECONDARY
        )
        top_rec_label.pack(anchor="w")
        
        # Main crop recommendation
        main_crop = tk.Label(
            recommendation_card,
            text=self.recommendation_data["top_recommendation"],
            font=("Arial", 24, "bold"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_PRIMARY
        )
        main_crop.pack(anchor="w", pady=(0, 10))
        
        # Score indicator
        score_frame = tk.Frame(recommendation_card, bg=THEME_COLOR_TEXT_LIGHT)
        score_frame.pack(anchor="w", fill="x")
        
        score_label = tk.Label(
            score_frame,
            text="Suitability Score:",
            font=("Arial", 12),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_TEXT
        )
        score_label.pack(side=tk.LEFT)
        
        # Create score bar
        score = self.recommendation_data["score"]
        max_score = 100  # Maximum possible score
        score_percent = min(100, int((score / max_score) * 100))
        
        score_canvas = tk.Canvas(
            score_frame, 
            width=300, 
            height=20,
            bg="#e0e0e0",
            highlightthickness=0
        )
        score_canvas.pack(side=tk.LEFT, padx=(10, 5))
        
        # Draw score bar with gradient color
        if score_percent < 40:
            bar_color = "#ff5252"  # Red
        elif score_percent < 70:
            bar_color = "#ffb300"  # Amber
        else:
            bar_color = "#69f0ae"  # Green
            
        score_canvas.create_rectangle(
            0, 0,
            (score_percent/100) * 300, 20,
            fill=bar_color, outline=""
        )
        
        score_value = tk.Label(
            score_frame,
            text=f"{score_percent}%",
            font=("Arial", 12, "bold"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_TEXT
        )
        score_value.pack(side=tk.LEFT)
        
        # Alternative recommendations
        alt_label = tk.Label(
            recommendation_card,
            text="Alternative crops:",
            font=("Arial", 12),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_TEXT
        )
        alt_label.pack(anchor="w", pady=(15, 5))
        
        alt_crops = ", ".join(self.recommendation_data["alternative_crops"])
        alt_crops_label = tk.Label(
            recommendation_card,
            text=alt_crops,
            font=("Arial", 12, "italic"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_TEXT
        )
        alt_crops_label.pack(anchor="w")
        
        # Info cards row
        info_frame = tk.Frame(self.results_frame, bg=THEME_COLOR_BG)
        info_frame.grid(row=1, column=0, sticky="ew")
        info_frame.columnconfigure(0, weight=1)
        info_frame.columnconfigure(1, weight=1)
        
        # District info card
        self.create_info_card(
            info_frame, 
            "District Information", 
            0, 0,
            [
                f"District: {self.district_var.get()}",
                f"Agricultural Zone: {self.recommendation_data['district_info']['zone']}",
                f"Soil Type: {self.recommendation_data['district_info']['soil_quality']}",
                f"Water Availability: {self.recommendation_data['district_info']['water_availability']}",
                f"Traditional Crops: {', '.join(self.recommendation_data['district_info']['traditional_crops'])}"
            ]
        )
        
        # Weather info card
        weather_data = self.recommendation_data["weather_summary"]
        extreme_conditions = weather_data["extreme_conditions"]
        
        self.create_info_card(
            info_frame, 
            "Weather Forecast Summary", 
            0, 1,
            [
                f"Current Season: {self.recommendation_data['current_season']}",
                f"Average Temperature: {weather_data['avg_temp']}Â°C",
                f"Total Expected Rainfall: {weather_data['total_rainfall']}mm",
                f"Average Humidity: {weather_data['humidity']}%",
                f"Extreme Heat Days (>40Â°C): {extreme_conditions['heat_days']}",
                f"Frost Days (<0Â°C): {extreme_conditions['frost_days']}",
                f"Heavy Rain Days (>50mm): {extreme_conditions['heavy_rain_days']}"
            ]
        )
        
        # Create visualization section
        viz_frame = tk.Frame(self.results_frame, bg=THEME_COLOR_TEXT_LIGHT, padx=20, pady=20)
        viz_frame.grid(row=2, column=0, sticky="ew", pady=(15, 0))
        
        viz_label = tk.Label(
            viz_frame,
            text="Crop Suitability Visualization",
            font=("Arial", 14, "bold"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_PRIMARY
        )
        viz_label.pack(anchor="w")
        
        # Create a figure for plotting
        fig, ax = plt.subplots(figsize=(8, 4))
        
        # Get top 5 crops and their scores
        top_crops = []
        for crop_tuple in sorted(self.crop_scores.items(), key=lambda x: x[1], reverse=True)[:5]:
            crop_name = crop_tuple[0]
            score = min(100, int((crop_tuple[1] / 100) * 100))
            top_crops.append((crop_name, score))
        
        crops = [crop[0] for crop in top_crops]
        scores = [crop[1] for crop in top_crops]
        
        # Create bar chart
        bars = ax.barh(crops, scores, color=[
            '#1b5e20' if i == 0 else '#43a047' if i == 1 else '#66bb6a' if i == 2 else '#81c784' if i == 3 else '#a5d6a7'
            for i in range(len(crops))
        ])
        
        # Add score labels
        for bar in bars:
            width = bar.get_width()
            label_x_pos = width + 1
            ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f"{int(width)}%", 
                   va='center', fontsize=10)
        
        ax.set_xlabel('Suitability Score (%)')
        ax.set_xlim(0, 105)  # Leave room for percentage labels
        ax.set_title('Top 5 Recommended Crops')
        
        # Add figure to canvas
        canvas = FigureCanvasTkAgg(fig, master=viz_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Add detailed explanation 
        explanation_frame = tk.Frame(self.results_frame, bg=THEME_COLOR_TEXT_LIGHT, padx=20, pady=20)
        explanation_frame.grid(row=3, column=0, sticky="ew", pady=(15, 0))
        
        explanation_label = tk.Label(
            explanation_frame,
            text="Recommendation Explanation",
            font=("Arial", 14, "bold"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_PRIMARY
        )
        explanation_label.pack(anchor="w")
        
        # Generate explanation text based on the recommendation data
        explanation_text = self.generate_explanation()
        
        explanation_text_widget = scrolledtext.ScrolledText(
            explanation_frame,
            font=("Arial", 11),
            wrap=tk.WORD,
            height=6,
            bg=THEME_COLOR_TEXT_LIGHT
        )
        explanation_text_widget.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        explanation_text_widget.insert(tk.END, explanation_text)
        explanation_text_widget.config(state=tk.DISABLED)  # Make read-only

    def create_info_card(self, parent, title, row, column, info_list):
        card = tk.Frame(
            parent, 
            bg=THEME_COLOR_TEXT_LIGHT,
            highlightbackground=THEME_COLOR_SECONDARY,
            highlightthickness=1,
            padx=15,
            pady=15
        )
        card.grid(row=row, column=column, sticky="nsew", padx=5)
        
        # Title
        title_label = tk.Label(
            card,
            text=title,
            font=("Arial", 12, "bold"),
            bg=THEME_COLOR_TEXT_LIGHT,
            fg=THEME_COLOR_PRIMARY
        )
        title_label.pack(anchor="w", pady=(0, 10))
        
        # Info content
        for info in info_list:
            info_label = tk.Label(
                card,
                text=info,
                font=("Arial", 11),
                bg=THEME_COLOR_TEXT_LIGHT,
                fg=THEME_COLOR_TEXT,
                justify=tk.LEFT
            )
            info_label.pack(anchor="w", pady=2)

    def generate_explanation(self):
        # Get necessary data
        top_crop = self.recommendation_data["top_recommendation"]
        district = self.district_var.get()
        zone = self.recommendation_data["district_info"]["zone"]
        soil = self.recommendation_data["district_info"]["soil_quality"]
        season = self.recommendation_data["current_season"]
        
        # Check if crop is traditional
        traditional = top_crop in self.recommendation_data["district_info"]["traditional_crops"]
        traditional_text = f"{top_crop} is traditionally grown in {district}." if traditional else ""
        
        # Check weather conditions
        weather = self.recommendation_data["weather_summary"]
        is_drought = weather["extreme_conditions"]["heat_days"] > 5 and weather["total_rainfall"] < 400
        is_excess_rain = weather["extreme_conditions"]["heavy_rain_days"] > 3
        
        weather_note = ""
        if is_drought:
            weather_note = f"\n\nNote: The forecast shows potential drought conditions. Ensure adequate irrigation."
        elif is_excess_rain:
            weather_note = f"\n\nNote: The forecast shows potential for heavy rainfall. Ensure good drainage."
        
        # Generate explanation
        explanation = (
            f"{top_crop} is recommended as the best crop for {district} district in the {zone} zone during the "
            f"current {season} season. This recommendation is based on the expected weather conditions, "
            f"the {soil} soil in your district, and weather forecast for the next 3 months.\n\n"
            f"{traditional_text}\n\n"
            f"The average temperature of {weather['avg_temp']}Â°C and expected rainfall of {weather['total_rainfall']}mm "
            f"are suitable for {top_crop} cultivation. "
            f"{weather_note}"
        )
        
        return explanation

    def setup_footer(self):
        # Copyright info
        copyright_label = tk.Label(
            self.footer_frame, 
            text="Â© 2025 Rajasthan Crop Advisor | Developed for Rajasthan Farmers", 
            font=("Arial", 8), 
            bg=THEME_COLOR_PRIMARY, 
            fg=THEME_COLOR_TEXT_LIGHT
        )
        copyright_label.pack(side=tk.RIGHT, padx=10, pady=5)

    def load_district_data(self):
        # This would normally load from a database or file
        # For now, we'll use default values
        return {}

    def get_soil_type(self, location):
        # Get soil type based on district
        # This would normally query a database
        soil_types = {
            "Jaipur": "Sandy loamy soil",
            "Kota": "Alluvial black soil",
            "Jodhpur": "Sandy soil",
            "Udaipur": "Mixed Red & Black",
            "Bikaner": "Sandy soil",
            "Ajmer": "Sandy Loam",
            "Alwar": "Alluvial",
            "Bharatpur": "Alluvial",
            "Barmer": "Sandy",
            "Jaisalmer": "Sandy"
        }
        
        # If soil override is selected, use that instead
        if self.soil_var.get() != "Default (District-based)":
            return self.soil_var.get()
            
        return soil_types.get(location, "Sandy Loam")

    def get_weather_forecast(self, api_key, location):
        # In a real app, this would call the actual weather API
        # For demo purposes, we'll simulate the response
        self.loading_label.grid()
        self.root.update()  # Update UI to show loading state
        
        try:
            # Try to make actual API call
            base_url = "http://api.weatherapi.com/v1/forecast.json"
            days = 90  # 3 months forecast
            url = f"{base_url}?key={api_key}&q={location}&days={days}"
            response = requests.get(url)
            data = response.json()
            
            self.loading_label.grid_remove()
            return data
        except:
            # Fallback to simulated data for demo
            self.loading_label.grid_remove()
            
            # Generate simulated weather data based on district and season
            weather_data = self.generate_simulated_weather(location)
            return weather_data

    def generate_simulated_weather(self, location):
        # Current month to determine season
        current_month = datetime.now().month
        
        # Determine base temperature and rainfall by zone
        zone_weather = {
            "Western Arid": {"temp": 32, "rain": 250, "humidity": 45},
            "Semi-Arid": {"temp": 28, "rain": 400, "humidity": 55},
            "Transitional Plain": {"temp": 27, "rain": 500, "humidity": 60},
            "Eastern Plain": {"temp": 26, "rain": 650, "humidity": 65},
            "Humid Southern": {"temp": 25, "rain": 750, "humidity": 70},
            "Northern Hot": {"temp": 30, "rain": 550, "humidity": 60}
        }
        
        # Map districts to zones
        district_zones = {
            "Jaisalmer": "Western Arid",
            "Barmer": "Western Arid",
            "Bikaner": "Western Arid",
            "Jodhpur": "Western Arid",
            "Jaipur": "Semi-Arid",
            "Ajmer": "Transitional Plain",
            "Kota": "Eastern Plain",
            "Udaipur": "Humid Southern"
        }
        
        zone = district_zones.get(location, "Semi-Arid")
        base_weather = zone_weather[zone]
        
        # Season adjustments
        if 3 <= current_month <= 6:  # Summer
            temp_adjust = 5
            rain_adjust = -100
            humidity_adjust = -10
        elif 7 <= current_month <= 10:  # Monsoon
            temp_adjust = 0
            rain_adjust = 300
            humidity_adjust = 15
        else:  # Winter
            temp_adjust = -8
            rain_adjust = -200
            humidity_adjust = 0
            
        # Build simulated forecast
        forecast_days = []
        import random
        
        for day in range(90):
            # Randomize daily values around the baseline
            temp_variance = random.uniform(-3, 3)
            rain_variance = random.uniform(-5, 5)
            
            #